<?php
namespace Piggly\Tests\ValueTypes\Advanced;

use PHPUnit\Framework\TestCase;
use Piggly\ValueTypes\Advanced\EmailType;

/**
 * @coversDefaultClass \Piggly\ValueTypes\Advanced\EmailType
 */
class EmailTypeTest extends TestCase
{
	/**
	 * Assert if $value is validated as $expected.
	 *
	 * @covers ::validate
	 * @covers ::assert
	 * @covers ::__construct
	 * @dataProvider dataValues
	 * @test Expecting positive assertion.
	 * @param boolean $expected Expected result.
	 * @param boolean $value Value to validate
	 * @return boolean
	 */
	public function canValidate ( bool $expected, string $value )
	{ $this->assertEquals($expected, (new EmailType($value))->validate()); }

	/**
	 * Assert if $value is masked as $expected.
	 *
	 * @covers ::masked
	 * @covers ::__construct
	 * @dataProvider dataToMask
	 * @test Expecting positive assertion.
	 * @param string $expected Expected result.
	 * @param string $value Value to validate
	 * @return boolean
	 */
	public function canMask ( string $expected, string $value, bool $keepLenght = true )
	{ $this->assertEquals($expected, (new EmailType($value))->masked($keepLenght)); }

	/**
	 * A list with random values to validate.
	 * Provider to canValidate() method.
	 * - Generated by fakerphp.
	 * @return array
	 */
	public function dataValues () : array
	{
		$arr = [];
		$faker = \Faker\Factory::create();

		for ( $i = 0; $i < 50; $i++ )
		{ $arr[] = [true, $faker->email()]; }

		for ( $i = 0; $i < 50; $i++ )
		{ $arr[] = [false, str_replace('@', '', $faker->email())]; }

		for ( $i = 0; $i < 50; $i++ )
		{ $arr[] = [false, \str_replace('.', '', $faker->email())]; }

		return $arr;
   }

	/**
	 * A list with random values to mask.
	 * Provider to canMask() method.
	 * - Generated by fakerphp.
	 * @return array
	 */
	public function dataToMask () : array
	{
		return [
			['alb************@k******.com','albertha.harvey@krajcik.com'],
			['jus************@y****.com','juston.prosacco@yahoo.com'],
			['sha************@s*********.org','shanahan.amalia@schowalter.org'],
			['hod***************@y****.com','hodkiewicz.heather@yahoo.com'],
			['nic***********@y****.com','nicolas.carlie@yahoo.com'],
			['hag**********@g****.com','hagenes.ralph@gmail.com'],
			['ian**@h******.com','ian22@hotmail.com'],
			['rst***@h******.com','rstark@hotmail.com'],
			['kke*******@h******.com','kkertzmann@hotmail.com'],
			['ale*************@k*****.info','alejandra.hamill@kemmer.info'],
			['the*******@g****.com','thettinger@gmail.com'],
			['ola**@k******.net','ola41@koelpin.net'],
			['gra*******@h******.com','grant.vida@hotmail.com'],
			['mar***************@h******.com','margaret.kertzmann@hotmail.com'],
			['deo*****@h******.com','deonte76@hotmail.com'],
			['kay*********@g****.com','kaylee.morar@gmail.com'],
			['ard*********@b*********.com','ardith.mayer@balistreri.com'],
			['dac******@g**********.com','dach.kira@greenfelder.com'],
			['koc*******@m****.biz','koch.paris@marks.biz'],
			['rca*****@p*******.com','rcarroll@predovic.com'],
			['alt****************@g****.com','altenwerth.patience@gmail.com'],
			['del******@k*******.com','delaney94@kassulke.com'],
			['ver****@r***.com','verla22@ryan.com'],
			['ali*@l*.net','aliyah03@lind.net', false],
			['lle*@y*.com','llewellyn12@yahoo.com', false],
			['jen*@g*.com','jenkins.blair@gmail.com', false],
			['ame*@h*.com','amelia.casper@hotmail.com', false],
			['cma*@s*.com','cmayer@stamm.com', false],
			['nbe*@g*.com','nbednar@gmail.com', false],
			['oth*@s*.com','otha73@schinner.com', false],
			['bar*@f*.biz','bart79@fahey.biz', false],
			['lar*@h*.com','larkin.alexanne@hotmail.com', false],
			['dar*@h*.com','darrel.bartoletti@hegmann.com', false],
			['sav*@g*.org','savanna89@greenholt.org', false],
			['mar*@p*.com','margarett.vandervort@parker.com', false],
			['jar*@b*.info','jarrett10@bode.info', false],
			['dia*@c*.com','dianna03@corwin.com', false],
			['sch*@c*.com','schowalter.marlin@crist.com', false],
			['ysp*@g*.com','yspencer@gmail.com', false],
			['chy*@g*.com','chyna.ernser@gmail.com', false],
			['syl*@y*.com','sylvan14@yahoo.com', false],
			['bwa*@h*.com','bwalker@hotmail.com', false],
			['bec*@l*.net','bechtelar.nikki@larkin.net', false],
			['mar*@h*.com','marge19@hotmail.com', false],
			['joa*@h*.com','joanie02@hotmail.com', false],
			['mpa*@a*.com','mpadberg@abernathy.com', false],
			['den*@f*.biz','dennis70@funk.biz', false],
			['ygl*@h*.com','ygleason@hotmail.com', false],
			['ger*@g*.com','geraldine62@gmail.com', false],
			['tro*@b*.com','troy.beatty@bashirian.com', false],
			['yle*@v*.com','yledner@von.com', false],
			['mau*@y*.com','maud05@yahoo.com', false],
			['bas*@h*.com','bashirian.evelyn@hotmail.com', false],
			['wil*@y*.com','wilhelm00@yahoo.com', false],
		];
   }
}