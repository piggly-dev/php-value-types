<?php
namespace Piggly\Tests\ValueTypes\Advanced;

use PHPUnit\Framework\TestCase;
use Piggly\ValueTypes\Advanced\PasswordType;

/**
 * @coversDefaultClass \Piggly\ValueTypes\Advanced\PasswordType
 */
class PasswordTypeTest extends TestCase
{
	/**
	 * Assert if $value is encrypted.
	 *
	 * @covers ::validate
	 * @covers ::assert
	 * @covers ::__construct
	 * @dataProvider dataValues
	 * @test Expecting positive assertion.
	 * @param string $raw Raw password.
	 * @return boolean
	 */
	public function canEncrypt ( string $raw )
	{ 
		$password = new PasswordType($raw);
		$this->assertTrue( !empty(\password_get_info($password->get())['algo']) );
	}

	/**
	 * Assert if $value is encrypted.
	 *
	 * @covers ::validate
	 * @covers ::assert
	 * @covers ::__construct
	 * @dataProvider dataValues
	 * @test Expecting positive assertion.
	 * @param string $raw Raw password.
	 * @return boolean
	 */
	public function canCheckEncryption ( string $raw )
	{ 
		$password = new PasswordType($raw);
		$this->assertTrue( $password->check($raw) );
	}

	/**
	 * A list with random values to validate.
	 * Provider to canValidate() method.
	 * - Generated by fakerphp.
	 * @return array
	 */
	public function dataValues () : array
	{
		$arr = [];
		$faker = \Faker\Factory::create();

		for ( $i = 0; $i < 50; $i++ )
		{ $arr[] = [$faker->regexify('[a-zA-Z0-9\*\@\#]{16}')]; }

		return $arr;
   }
}